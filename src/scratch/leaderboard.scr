Events:
    UpdateLeaderboard
Globals:
    g:Leaderboard_Name
    g:Leaderboard_Score
Cloud:
    c:Leaderboard1
    c:Leaderboard2
Local Const:
    MAX_SCORES = 100
    // Note: These 2 set by init_chs
    CH_0 = <char index of '0'>
    CH_9 = <char index of '9'>
    // Note: This one set after initialization of char array.
    MAX_C = length of chs
    CH_STR // used for initialization of chs only
    
Local:
    chs[]  // list of chars with offset corresponding to encoding
    lbs[]
    try[]
    cis[]
    css[]
    ary[]
    flens[]
    isnum[]
    idx
    wr_idx
    done
    i
    j
    ii
    n
    nn
    c      // generic char var
    s      // generic string var
    cs     // generic cksum var
Function Local:
    enc_c
    enc_i
    enc_cs
    enc_enc
Function Local:
    encall_enc
Function Local:
    dec_c
    dec_ci
    dec_n
    dec_nf
    dec_fi
    dec_flen
    dec_s
    dec_cs

On Start:
    // TODO: Perhaps lazy init.
    init_chs // in scratch only, but pretty simple
    MAX_C = length of chs
    flens = [50, 500, 50]
    isnum = [1, 0, 1]
    
On UpdateLeaderboard:
    lbs = [c:Leaderboard1, c:Leaderboard2]
    try = [] // potentially-valid lb indices
    cis = [] // holds cidx value for next call to dec
    css = []
    // Partially process both lbs.
    i = 1
    repeat 2
        ii = i * 2 - 1
        // Pre-validation
        // Encoded string must have at least 2-digits each of cs, sep, sn, and
        // all digits must appear in pairs.
        // TODO: Min could be more than 6 if we have a seqno bias.
        n = length of lbs[i]
        if n < 6 || (n + 1) mod 2 = 0
            dec_ok = false
        else
            dec(lbs[i], 1, 1, 1, 2, 2)
        // Add unconditionally (regardless of validity) to assure proper length.
        add dec_ci to cis
        add dec_cs to css
        if dec_ok
            // Validate cs and sn
            // TODO: Perhaps more checking on (eg) seqno
            if ary[ii] > 0 && ary[ii+1] > 0
                // Insert at proper location in try[]
                // Note: With only 2 elements, sorted add is simple.
                if length of try = 0 || try[1] > ary[ii+1]
                    add i to try[] // append
                else
                    insert i at 1 in try
        i++

    idx = 0 // will be set to point to first valid lb (if any)
    // Try all potentially-valid lbs
    i = 1
    n = length of try
    repeat until done || i > n
        j = try[i]
        dec(lbs[j], cis[j], 2, 3, 0, 0)
        if dec_ok
            ii = j * 2 - 1 // index of cs in ary
            if ary[ii] = css[j] + dec_cs
                done = true
                idx = j
                // Trim ary if necessary.
                if dec_fcnt + 2 < length of ary
                    trunc_ary dec_fcnt + 2
        i++

    if idx > 0
        // At least 1 lb valid
        // Remove unused elements from ary[].
        wr_idx = (idx mod 2) + 1
        repeat 2
            delete wr_idx * 2 - 1 of ary
    else
        delete all of ary
        add 0 to ary // to be filled in later
        // Design Decision: Initialize seqno to bolster checksum.
        add 1234 to ary
        wr_idx = 1
    
    // Insert current user's name/score
    ins(g:Leaderboard_Name, g:Leaderboard_Score)

    // Encode everything in ary.
    encall

    // Write back to appropriate cloud var.
    if wr_idx = 1
        c:Leaderboard1 = encall_enc
    else
        c:Leaderboard2 = encall_enc

Block: trunc_ary(keep)
    repeat (length of ary) - keep
        delete last of ary

// Inputs: lb, ci, f1, f2, min_nf, max_nf
// Outputs: dec_ok, dec_ci, dec_fcnt, dec_cs
Block: dec(lb, ci, f1, f2, min_nf, max_nf)
    dec_ci = ci
    dec_n = length of lb
    dec_nf = 0           // # flds processed
    dec_fi = f1          // cur fld in ary (wraps at f2)
    dec_flen = 0         // fld len
    dec_s = ''           // fld accum
    dec_cs = 0
    dec_ok = true

    repeat until dec_ci > dec_n || not dec_ok || (max_nf > 0 && dec_nf > max_nf)
        // Get and validate next pair of digits.
        dec_c = join(lb[dec_ci], lb[dec_ci + 1])
        dec_ci += 2
        // Note: If we don't check individual digts, need to be sure the pair
        // isn't something like `-3'.
        if !dec_c = round(dec_c) || dec_c < 0
            dec_ok = false
        else
            if dec_c > 0
                // Note: Increment dec_flen here so it can be used in validation.
                dec_flen++
                dec_cs += dec_c
                // Validation
                if dec_flen > flens[dec_fi]
                    // Field too long!
                    dec_ok = false
                else
                    if dec_c > MAX_C
                        // Bad char!
                        dec_ok = false
                    else
                        // Decode a single character.
                        dec_s = join(dec_s, letter dec_c of ch_str)
                        // TODO: Consider doing digit check here, in lieu of (or in
                        // addition to) num check at field termination.
            else
                // Terminator found.
                // Assumption: We've already determined we have a digit pair
                // representing nonzero value.
                // Fld validation
                if dec_flen = 0
                    dec_ok = false
                else
                    if isnum[dec_fi] && !(round(dec_s) = dec_s)
                        // Number required
                        dec_ok = false
                if dec_ok
                    // Fld complete
                    // Note: None of this matters if not dec_ok
                    add dec_s to ary
                    dec_nf++
                    dec_s = ''
                    dec_flen = 0
                    dec_fi++
                    if dec_fi > f2
                        dec_fi = f1

    // Final validation
    if dec_ok
        if dec_flen > 0
            // All fields must be terminated
            dec_ok = false
        else
            if dec_nf < min_nf
                dec_ok = false
            else
                if dec_fi > f1
                    // Must process whole number of f1..f2 chunks.
                    // Note: Could have arg that governs this...
                    dec_ok = false
            

// Context: Top-level
// Assumption: ary contains cs, sn, [NAME, SCORE]...
Block: ins(name, score)
    n = length of ary
    i = 3
    done = false
    // Add name/score to sorted list and remove lowest scores when over limit.
    loop until i > n || done
        if !score < ary[i + 1]
            // Found spot!
            insert score at i in ary
            insert name at i in ary
            done = true
        i += 2
    // Calculate excess scores
    nn = (length of ary - 2) / 2 - MAX_SCORES
    // Should we append current user's score?
    if !done && nn < 0
        add name to ary
        add score to ary
        nn++
    // Delete lowest excess scores.
    // Assumption: repeat can handle neg. counts (tested).
    if nn > 0
        repeat nn * 2
            delete last of ary
    
// Outputs: enc_enc, enc_cs
Block: enc(str)
    enc_i = 1
    enc_cs = 0
    enc_enc = ''
    repeat length of str
        indexof(str[enc_i])
        enc_c = indexof_res
        // TODO: Perhaps check for 0, but shouldn't be able to happen.
        enc_cs += enc_c
        // Prepend leading '0' if necessary to ensure 2 digits.
        if length of enc_c = 1
            enc_c = join 0, enc_c
        enc_enc = join enc_enc, enc_c
        enc_i++
        

// Context: Top-level
// Outputs: encall_enc
Block: encall
    // TODO: Consider adding a bias to cs.
    cs = 0
    n = length of ary
    encall_enc = '00'
    
    // Encode all fields but cs, keeping up with cksum val as we go.
    i = 2
    repeat until i > n
        enc(ary[i])
        encall_enc = join encall_enc, join(enc_enc, '00')
        cs += enc_cs
        i++
    
    // Now prepend cs
    enc(cs)
    encall_enc = join enc_enc, encall_enc
    

// TODO: The array chs may not longer be required, as we can loop over the
// string just as easily.
Block: init_chs
    ch_str = <ascii 0x20 .. 0x7e>
    i = 1
    delete all of chs
    repeat length of ch_str
        ltr = letter i of ch_str
        if ltr = 0
            CH_0 = i
        else
            if ltr = 9
                CH_9 = i
        add ltr to chs
        i++
    MAX_C = i - 1

Block: indexof(c)
    indexof_n = length of ch_str
    indexof_i = 1
    indexof_res = 0
    repeat until indexof_i > indexof_n || indexof_res > 0
        if (letter indexof_i of ch_str) = c
            indexof_res = indexof_i
        indexof_i++

Events:
    UpdateLeaderboard
    LeaderboardNoLogin
    LeaderboardError
    LeaderboardSuccess
Globals:
    g:Leaderboard_Score
    g:Leaderboard_Names
    g:Leaderboard_Scores
    g:Leaderboard_Display
    g:Inhibit_Leaderboard_Display
Local Const:
    // Value at which we wrap the watchdog counter.
    // Rationale: May avoid performance penalty of very large (>64-bit)
    // integers.
	WD_MAX = 1000000000
    // Delay that keeps us from consuming too much bandwidth servicing the watchdog.
    // Tradeoff: Non-leaderboard processing performance (probably not much going
    // on) vs risk of unreliable monitoring.
    // TODO: Remove this if unused.
	WD_MON_PERIOD = 0.1
    // Delay that keeps us from consuming too much bandwidth servicing the watchdog.
    // Tradeoff: Leaderboard processing performance vs risk of someone else
    // breaking our lock.
	WD_SVC_PERIOD = 0.25
    // Max # of wd increments that could conceivably occur without the monitor
    // noticing (and then some). Used to detect wraparound and/or irrational
    // watchdog servicing.
    // Note: Make sure this is long enough to ensure that a temporarily stuck
    // pc doesn't cause problem.
    WD_MISS_MAX = 10 / WD_SVC_PERIOD
    // Time that must elapse since last observed watchdog service before we'll
    // break a user's lock.
	WD_TMOUT = 5           
    // Total time to attempt to acquire the lock
	LK_TMOUT = 10
    // Time to wait after attempting to acquire lock before reading back the
    // lock var to see whether we were successful.
    // Tradeoff: Responsiveness vs risk of proceeding with processing only to
    // find that someone else has acquired the lock.
	LK_READBACK_TMOUT = 1  // time to wait before checking whether we acquired lock
Cloud:
    c:leaderboard_user
    c:leaderboard_wd
Local:
    st
    ts
    wd_age
    StartWd_petted
    StartWd_tmr
    StartWd_cnt
    StartWd_usr
    StartWd_cnt_prev
    StartWd_usr_prev
    euser

On UpdateLeaderboard
    set_username
    if length of euser = 0
        broadcast LeaderboardNoLogin
        // But go ahead and process the leaderboard for display only.
        process_lb '', 0
    else
        lock_and_update

On StartWd
    StartWd_tmr = timer
    StartWd_cnt = c:leaderboard_wd
    StartWd_usr = c:leaderboard_user
    StartWd_cnt_prev = StartWd_cnt
    StartWd_usr_prev = StartWd_usr
    // Keep looping till st no longer requires watchdog.
    // Assumption: State will never go from 2 to 1.
    repeat until st < 1 || st > 2
        if st = 1
            // Monitoring
            StartWd_cnt = c:leaderboard_wd
            StartWd_usr = c:leaderboard_user
            // Design Decision: Indirectly signal when watchdog servicing seems
            // irrational (by advancing age), but err on the side of caution by
            // allowing it to re-sync.
            // Rationale: The point of the watchdog processing is to permit
            // controller to break lock when it appears someone out of control
            // has it, but we want to err on side of caution when taking such a
            // drastic step: can't hurt to wait a few seconds to let things
            // settle after detecting irrationality.
            StartWd_petted = false
            if !StartWd_usr = StartWd_usr_prev
                StartWd_petted = true
            else
                if StartWd_cnt > StartWd_cnt_prev
                    if StartWd_cnt - StartWd_cnt_prev < WD_MISS_MAX
                        // Normal increment
                        StartWd_petted = true
                else
                    if StartWd_cnt < StartWd_cnt_prev
                        if (StartWd_cnt_prev + WD_MISS_MAX) mod WD_MAX > StartWd_cnt
                            // Normal wraparound
                            StartWd_petted = true

            if StartWd_petted = true
                // Dog has been petted.
                wd_age = 0
                StartWd_tmr = timer
            else
                wd_age = timer - StartWd_tmr

            StartWd_cnt_prev = StartWd_cnt
            StartWd_usr_prev = StartWd_usr
        else
            if st = 2
                // Servicing
                // Note: Although there could be up to a WD_SVC_TICK
                // delay in shutting this off, there's no
                // race-condition inherent in the changing of
                // c:leaderboard_wd.
                c:leaderboard_wd++
                if c:leaderboard_wd > WD_MAX
                    c:leaderboard_wd = 0

        // Avoid consuming unnecessary bandwidth when we're processing.
        // Note: Finer resolution desired when monitoring...
        if st = 2
            wait WD_SVC_PERIOD seconds
    

Block: set_username
    euser = ''
    if length of fake_username > 0
        euser = fake_username
    else
        // Determine from username block.
        // Question: What if user not logged in?
        euser = username

Block: lock_and_update
    st = 1
    broadcast StartWd
    ts = timer
    wait until !st = 1
        if length of c:leaderboard_user = 0
            grablock
        else
            if timer - ts > LK_TMOUT
                // Overall timeout
                st = 0
                broadcast LeaderboardTimeout
            else
                if wd_age > WD_TMOUT
                    // Try to break lock
                    // TODO: Should there be an additional wait here, or is
                    // existing randomization sufficient?
                    c:leaderboard_user = ''


Block: grablock
    c:leaderboard_user = euser
    wait LK_READBACK_TMOUT seconds
    if c:leaderboard_user = euser
        // Got it!
        st = 2
        update
    // else just fall through and keep trying
    
Block: update
    // Process: Put the original UpdateLeaderboard event into a process_lb block.
    process_lb euser, g:Leaderboard_Score
    // Make sure we still have lock before attempting to write back.
    if c:leaderboard_user = euser
        if process_lb_wr_idx = 1
            c:Leaderboard1 = process_lb_enc
        else
            c:Leaderboard2 = process_lb_enc
        broadcast LeaderboardSuccess
    else
        broadcast LeaderboardError
    // Go back to inactive state to de-activate watchdog.
    st = 0

        
        

    

// vim:ts=4:sw=4:et:ft=c
